data <- read.csv("data/popisrere.csv")
View(data)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
library(sf)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
View(data)
View(communes)
dim(data)
dim(commmunes)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
dim(commmunes)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
dim(communes)
communes = merge(x = communes, y = data, by = "id", all.x = true)
communes = merge(x = communes, y = data, by = "id", all.x = TRUE)
View(communes)
knitr::kable(communes, row.names = F, digits = 1)
library(mapsf)
install.packages("mapsf")
install.packages("sf")
install.packages("sf")
data <- read.csv2("data/popisrere.csv")
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv2("data/popisrere.csv")
library(sf)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv2("data/popisrere.csv")
View(data)
data <- read.csv("data/popisrere.csv")
View(data)
data <- read.csv("data/popisrere.csv", stringsAsFactors=FALSE)
View(data)
class(data$pop2018)
data <- read.csv("data/popisrere.csv", stringsAsFactors=FALSE, dec = ",")
View(data)
data <- read.csv("data/popisrere.csv", stringsAsFactors=FALSE, dec = ",")
View(data)
class(data$pop2018)
data <- read.csv("data/popisrere.csv",  dec = ",")
class(data$pop2018)
dots = communes
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(communes, st_coordinates(dots))
View(dots)
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots, st_coordinates(dots))
View(communes)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes, y = data, by = "id")
knitr::kable(communes[c(0:10),], row.names = F, digits = 1)
library(mapsf)
mf_export(
communes,
export = "png",
filename = paste0("maps/plot.png"),
res = 96,
theme = "default"
)
mf_map(communes, col = "#c76fa0",border = "white", lwd = 0.5, add = TRUE)
mf_title("Créer une carte avec mapsf")
mf_scale(size = 20, pos = "bottomright", lwd = 1.5, cex = 0.6, col = "#383838", unit = "km")
dev.off()
mf_export(
communes,
export = "png",
filename = paste0("maps/proSymbols.png"),
res = 96,
theme = "default"
)
mf_map(communes, col = "#baaba2",border = "white", lwd = 0.5, add = TRUE)
mf_map(communes, var = "pop2018", type = "prop", col = "#c76fa0",
border = "#61122f", lwd = 0.5, leg_title = "Population, 2018",
add = TRUE)
mf_title("Symboles proportionnels avec mapsf")
mf_scale(size = 20, pos = "bottomright", lwd = 1.5,
cex = 0.6, col = "#383838", unit = "km")
dev.off()
View(communes)
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots, st_coordinates(dots))
View(communes)
View(dots)
colnames(dots)
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(x))
dots = dots[,c("id","x","y",)]
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(xdots)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots = dots[,c("id","x","y","v")]
dots = dots[,c("id","x","y","pop2018")]
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots = dots[,c("id","x","y","pop2018")]
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
View(dots)
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots = dots[,c("dots.id","x","y","pop2018")]
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots = dots[,c("dots.id","x","y","pop2018")]
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
colnames(dots)
dots = dots[,c("dots.id","X","Y","pop2018")]
colnames(dots) <- c("id","x","y","v")
dots <- dots[!is.na(dots$v),]
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots = communes
st_geometry(dots) <- st_centroid(sf::st_geometry(dots),of_largest_polygon = TRUE)
dots <- data.frame(dots$id, dots["pop2018"], st_coordinates(dots))
dots = dots[,c("dots.id","X","Y","pop2018")]
colnames(dots) <- c("id","x","y","v")
dots <- dots[!is.na(dots$v),]
knitr::kable(dots[c(0:5),], row.names = F, digits = 1)
dat.init <- dots[,c("x","y","v")]
dat.init <- dots[,c("x","y","v")]
dat.init$v <- sqrt(dat.init$v * k)
simulation <- circleRepelLayout(x = dat.init, xysizecols = 1:3,
wrap = FALSE, sizetype = "area",
maxiter = itermax, weights =1)$layout
dat.init <- dots[,c("x","y","v")]
k = 1 # pour ajuster la taille des cercles
dat.init <- dots[,c("x","y","v")]
dat.init$v <- sqrt(dat.init$v * k)
simulation <- circleRepelLayout(x = dat.init, xysizecols = 1:3,
wrap = FALSE, sizetype = "radius",
maxiter = itermax, weights =1)$layout
install.packages(packcircles)
library(packcircles)
library("packcircles")
k = 1 # pour ajuster la taille des cercles
dat.init <- dots[,c("x","y","v")]
dat.init$v <- sqrt(dat.init$v * k)
simulation <- circleRepelLayout(x = dat.init, xysizecols = 1:3,
wrap = FALSE, sizetype = "radius",
maxiter = itermax, weights =1)$layout
k = 1 # pour ajuster la taille des cercles
itermax = 10 # nombre d'iterations
dat.init <- dots[,c("x","y","v")]
dat.init$v <- sqrt(dat.init$v * k)
simulation <- circleRepelLayout(x = dat.init, xysizecols = 1:3,
wrap = FALSE, sizetype = "radius",
maxiter = itermax, weights =1)$layout
View(simulation)
dat.init$v <- sqrt(dat.init$v * k)
simulation <- circleRepelLayout(x = dat.init, xysizecols = 1:3,
wrap = FALSE, sizetype = "radius",
maxiter = itermax, weights =1)
View(simulation)
library("packcircles")
k = 1 # pour ajuster la taille des cercles
itermax = 10 # nombre d'iterations
dat.init <- dots[,c("x","y","v")]
dat.init$v <- sqrt(dat.init$v * k)
simulation <- circleRepelLayout(x = dat.init, xysizecols = 1:3,
wrap = FALSE, sizetype = "radius",
maxiter = itermax, weights =1)$layout
View(simulation)
circles <- st_buffer(sf::st_as_sf(simulation, coords =c('x', 'y'),
crs = sf::st_crs(communes)), dist = simulation$radius)
View(circles)
circles$v = dots$v
View(circles)
plot(communes)
plot(st_geometry(communes)
plot(st_geometry(communes))
plot(st_geometry(communes))
locator(1)
plot.new()
plot(st_geometry(communes))
locator(1)
library(cartogram)
dorling = cartogram_dorling(communes, "pop2018")
dorling = cartogram_dorling(communes, "pop2018")
mf_export(
communes,
export = "png",
filename = paste0("maps/dorling2.png"),
res = 96,
theme = "default"
)
mf_map(communes, col = "#baaba2",border = "#baaba2", lwd = 0.5, add = TRUE)
mf_map(communes, col = "#baaba2",border = "#baaba2", lwd = 0.5, add = TRUE)
Olsen <- cartogram_ncont(communes, "pop2018")
library(sf)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes, y = data, by = "id")
knitr::kable(communes[c(0:10),], row.names = F, digits = 1)
library(mapsf)
mf_export(
communes,
export = "png",
filename = paste0("maps/plot.png"),
res = 96,
theme = "default"
)
mf_map(communes, col = "#c76fa0",border = "white", lwd = 0.5, add = TRUE)
mf_title("Créer une carte avec mapsf")
mf_scale(size = 20, pos = "bottomright", lwd = 1.5, cex = 0.6, col = "#383838", unit = "km")
dev.off()
install.packages(c("blob", "blogdown", "bookdown", "broom", "countrycode", "credentials", "DT", "e1071", "elevatr", "fastmatch", "gargle", "googledrive", "googlesheets4", "gt", "gtsummary", "GWmodel", "haven", "lwgeom", "magick", "maptools", "matrixStats", "osmdata", "osmextract", "packrat", "protolite", "proxyC", "pryr", "quanteda", "RcppArmadillo", "RCurl", "readr", "reprex", "reticulate", "rgeos", "rgexf", "rlist", "rmarkdown", "roxygen2", "rsconnect", "Rttf2pt1", "rvest", "servr", "showtext", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spdep", "survey", "sysfonts", "terra", "wk", "xfun", "XML"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "countrycode", "credentials", "DT", "e1071", "elevatr", "fastmatch", "gargle", "googledrive", "googlesheets4", "gt", "gtsummary", "GWmodel", "haven", "lwgeom", "magick", "maptools", "matrixStats", "osmdata", "osmextract", "packrat", "protolite", "proxyC", "pryr", "quanteda", "RcppArmadillo", "RCurl", "readr", "reprex", "reticulate", "rgeos", "rgexf", "rlist", "rmarkdown", "roxygen2", "rsconnect", "Rttf2pt1", "rvest", "servr", "showtext", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spdep", "survey", "sysfonts", "terra", "wk", "xfun", "XML"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "countrycode", "credentials", "DT", "e1071", "elevatr", "fastmatch", "gargle", "googledrive", "googlesheets4", "gt", "gtsummary", "GWmodel", "haven", "lwgeom", "magick", "maptools", "matrixStats", "osmdata", "osmextract", "packrat", "protolite", "proxyC", "pryr", "quanteda", "RcppArmadillo", "RCurl", "readr", "reprex", "reticulate", "rgeos", "rgexf", "rlist", "rmarkdown", "roxygen2", "rsconnect", "Rttf2pt1", "rvest", "servr", "showtext", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spdep", "survey", "sysfonts", "terra", "wk", "xfun", "XML"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "countrycode", "credentials", "DT", "e1071", "elevatr", "fastmatch", "gargle", "googledrive", "googlesheets4", "gt", "gtsummary", "GWmodel", "haven", "lwgeom", "magick", "maptools", "matrixStats", "osmdata", "osmextract", "packrat", "protolite", "proxyC", "pryr", "quanteda", "RcppArmadillo", "RCurl", "readr", "reprex", "reticulate", "rgeos", "rgexf", "rlist", "rmarkdown", "roxygen2", "rsconnect", "Rttf2pt1", "rvest", "servr", "showtext", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spdep", "survey", "sysfonts", "terra", "wk", "xfun", "XML"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "countrycode", "credentials", "DT", "e1071", "elevatr", "fastmatch", "gargle", "googledrive", "googlesheets4", "gt", "gtsummary", "GWmodel", "haven", "lwgeom", "magick", "maptools", "matrixStats", "osmdata", "osmextract", "packrat", "protolite", "proxyC", "pryr", "quanteda", "RcppArmadillo", "RCurl", "readr", "reprex", "reticulate", "rgeos", "rgexf", "rlist", "rmarkdown", "roxygen2", "rsconnect", "Rttf2pt1", "rvest", "servr", "showtext", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spdep", "survey", "sysfonts", "terra", "wk", "xfun", "XML"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "countrycode", "credentials", "DT", "e1071", "elevatr", "fastmatch", "gargle", "googledrive", "googlesheets4", "gt", "gtsummary", "GWmodel", "haven", "lwgeom", "magick", "maptools", "matrixStats", "osmdata", "osmextract", "packrat", "protolite", "proxyC", "pryr", "quanteda", "RcppArmadillo", "RCurl", "readr", "reprex", "reticulate", "rgeos", "rgexf", "rlist", "rmarkdown", "roxygen2", "rsconnect", "Rttf2pt1", "rvest", "servr", "showtext", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spdep", "survey", "sysfonts", "terra", "wk", "xfun", "XML"))
install.packages("recmap")
install.packages("~/Desktop/cartogramR_1.0-1.tar.gz", repos = NULL, type = "source")
install.packages("https://cran.r-project.org/src/contrib/Archive/cartogramR/cartogramR_1.0-1.tar.gz", repos = NULL, type = "source")
library("cartogramR")
