new$v <- 1
for (j in 1:rest$v[i]){ dots <- rbind(dots,new)}
}
dots$x <- jitter(dots$x)
dots$y <- jitter(dots$y)
dots$v <- radius
simulation <- circleRepelLayout(x = dots, xysizecols = 1:3,
wrap = FALSE, sizetype = "radius",
maxiter = itermax, weights =1)$layout
circles <- st_buffer(sf::st_as_sf(simulation, coords =c('x', 'y'),
crs = crs), dist = radius)
return(circles)
}
onedot = 1000
dc = dotcartogram(x = communes, var = "pop2018", itermax = 120,
onedot = onedot, radius = 600)
template("Dots Cartogram", "maps/dotcartogram.png", note = paste0("Un point =\n",onedot," personnes"), scale = FALSE)
mf_map(isere, col = "#CCCCCC", border = "white", lwd = 0.5, add = TRUE)
mf_map(dc, col = col, border = "#6b4266", lwd = 0.8, add = TRUE)
dev.off()
cartogram = st_read("files/GastnerSeguy.gpkg")
grid = st_make_grid(cartogram, cellsize = 2000, square = FALSE)
grid = st_sf(id = rep("",length(grid)), geometry = grid)
ctr = st_centroid(grid)
ids = cartogram[,"id"] %>% st_drop_geometry()
for(i in 1:nrow(grid)){
x = st_within(x = ctr[i,], y = cartogram, sparse = TRUE, prepared = TRUE)
id = ids[unlist(x),][1]
if (length(id) == 0){id = NA}
grid[i,"id"] = id
}
grid <- grid[!is.na(grid$id),]
gridcartogram <- aggregate(x = grid,
by = list(grid$id),
FUN = min)
varmax = sum(cartogram$pop2018)
nbcell = nrow(grid)
valcell = round(varmax / nbcell)
template("Template cartographique", "maps/hexcartogram.png", note = paste0("Un hexagone â‰ˆ\n",valcell," habitants"),basemap = FALSE, scale = FALSE)
mf_shadow(x = grid, col = "grey50", cex = 1, add = TRUE)
mf_map(grid, col = col, border = "white", lwd = 0.5, add = TRUE)
mf_map(gridcartogram, col = NA, border = "#6b4266", lwd = 1, add = TRUE)
dev.off()
library(recmap)
coords <- st_centroid(communes)
coords <- st_transform(coords, crs="+proj=longlat +datum=WGS84 +ellps=WGS84")
coords <- st_coordinates(coords)
coords
sfc_as_cols <- function(x, geometry, names = c("X","Y")) {
if (missing(geometry)) {
geometry <- sf::st_geometry(x)
} else {
geometry <- rlang::eval_tidy(enquo(geometry), x)
}
stopifnot(inherits(x,"sf") && inherits(geometry,"sfc_POINT"))
ret <- sf::st_coordinates(geometry)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
checkerboard
map <- checkerboard
map
rec_cartogram <- data.frame (x= coords$x,
y=coords$y,
# make the rectangles overlapping by correcting lines of longitude distance
dx = sqrt(coords$pop2018) / 90 / abs((0.65 * 60 * cos(coords$y*pi/180))),
dy = sqrt(coords$pop2018) / 90 / (0.65 * 60),
z = sqrt(coords$pop2018),
name = coords$id)
coords$x
coords
head(coords)
rec_cartogram <- data.frame (x= coords$X,
y=coords$Y,
# make the rectangles overlapping by correcting lines of longitude distance
dx = sqrt(coords$pop2018) / 90 / abs((0.65 * 60 * cos(coords$y*pi/180))),
dy = sqrt(coords$pop2018) / 90 / (0.65 * 60),
z = sqrt(coords$pop2018),
name = coords$id)
coords$pop2018
library(recmap)
sfc_as_cols <- function(x, geometry, names = c("x","y")) {
if (missing(geometry)) {
geometry <- sf::st_geometry(x)
} else {
geometry <- rlang::eval_tidy(enquo(geometry), x)
}
stopifnot(inherits(x,"sf") && inherits(geometry,"sfc_POINT"))
ret <- sf::st_coordinates(geometry)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
coords <- st_centroid(communes)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
coords <- st_centroid(communes)
coords <- st_transform(coords, crs="+proj=longlat +datum=WGS84 +ellps=WGS84")
coords
df_recmap <- sfc_as_cols(coords)
df_recmap
rec_cartogram <- data.frame (x= df_recmap$x,
y=df_recmap$y,
# make the rectangles overlapping by correcting lines of longitude distance
dx = sqrt(df_recmap$pop2018) / 90 / abs((0.65 * 60 * cos(df_recmap$y*pi/180))),
dy = sqrt(df_recmap$pop2018) / 90 / (0.65 * 60),
z = sqrt(df_recmap$pop2018),
name = df_recmap$id)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
bb <- st_bbox(communes)
st_voronoi(communes, bb)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
bb <- st_bbox(communes)
test = st_voronoi(communes, bb)
bb = st_as_sfc(st_bbox(communes))
test = st_voronoi(communes, bb)
class(test)
plot(st_geometry(test))
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
bb <- st_bbox(communes)
bb = st_as_sfc(st_bbox(communes))
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
bb = st_as_sfc(st_bbox(communes))
test = st_voronoi(communes, bb)
plot(st_geometry(test))
class(test)
View(test)
plot(st_geometry(test), lwd = 0.1, col ="NA")
test = st_voronoi(st_centroind(communes), bb)
test = st_voronoi(st_centroid(communes), bb)
plot(st_geometry(test), lwd = 0.1, col ="NA")
plot(st_geometry(test))
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
bb = st_as_sfc(st_bbox(communes))
test = st_voronoi(st_centroid(communes), bb)
plot(st_geometry(test))
test = st_voronoi(st_centroid(communes))
st_centroid(communes)
ctr = st_centroid(communes)
ctr
test = st_voronoi(ctr, bb)
plot(st_geometry(test))
plot(st_geometry(test), col = "red")
plot(st_geometry(test), col = NA)
test = st_voronoi(ctr)
plot(st_geometry(test), col = NA)
plot(st_geo)
set.seed(100)
df <- data.frame(ID = 1:10, X = sample(1:10, 10), Y = sample(1:10, 10))
df
d <- st_geometry(st_as_sf(df,coords = c("X", "Y")))
d
d <- st_union(d)
d
hull <- st_convex_hull(d)
hull
plot(hull)
plot(d, add = TRUE)
v <- st_voronoi(d)
v
View(d)
test = st_voronoi(st_geometry(ctr), bb)
plot(st_geometry(test), col = "red")
ctr = st_centroid(st_geometry(communes))
bb = st_as_sfc(st_bbox(communes))
ctr = st_centroid(st_geometry(communes))
test = st_voronoi(ctr, bb)
plot(st_geometry(test), col = "red")
plot(st_geometry(test))
plot(st_geometry(isere))
plot(st_geometry(test), add= T)
plot(st_geometry(test), add= T, col = NA, border = "red")
plot(st_geometry(isere))
plot(st_geometry(test), add= T, col = NA, border = "red")
v = st_voronoi(do.call(ctr, bb))
v = st_sfc(st_voronoi(communes, st_sfc(st_bbox(communes))))
v = st_sfc(st_voronoi(communes, st_sfc(st_bbox(communes)))
v = st_sfc(st_voronoi(communes, st_sfc(st_bbox(communes))
v = st_sfc(st_voronoi(communes, st_sfc(st_bbox(communes))
v = st_sfc(st_voronoi(communes, st_sfc(st_bbox(communes))))
v = st_sfc(st_voronoi(communes, st_sfc(st_bbox(communes))))
v = st_sfc(st_voronoi(st_geometry(communes), st_sfc(st_bbox(communes))))
st_voronoi(st_geometry(communes), st_sfc(st_bbox(communes)))
st_voronoi(st_centroid(st_geometry(communes)), st_sfc(st_bbox(communes)))
st_voronoi(st_centroid(st_geometry(communes)), st_sfc(st_bbox(communes)))
x = st_centroid(st_geometry(communes)
x = st_centroid(st_geometry(communes))
x = st_centroid(st_geometry(communes))
x
bb = st_as_sfc(st_bbox(communes))
bb
st_voronoi(x,bb)
st_sfc(st_voronoi(x,bb))
x = st_sfc(st_voronoi(x,bb))
plot(st_geometry(x))
st_voronoi(x, bb, dTolerance = 0, bOnlyEdges = FALSE)
x = st_voronoi(x, bb, dTolerance = 0, bOnlyEdges = FALSE)
View(x)
plot(st_geometry(x))
x = st_voronoi(x, NULL, dTolerance = 0, bOnlyEdges = FALSE)
plot(x)
plot(x, col = NA)
ctr <- st_centroid(communes)
st_voronoi(x = st_union(ctr))
x <- st_voronoi(x = st_union(ctr))
plot(x)
v <- st_intersection(st_cast(v), st_union(communes))
st_union(ctr)
v
ctr <- st_centroid(communes)
ctr <- st_centroid(st_geometry(communes))
v <- st_voronoi(x = st_union(ctr))
plot(v)
v = st_voronoi(x, NULL, dTolerance = 0, bOnlyEdges = FALSE)
v <- st_intersection(st_cast(v), st_union(communes))
v
ctr <- st_centroid(st_geometry(communes))
v <- st_intersection(st_cast(v), st_union(communes))
c <- st_centroid(st_geometry(communes))
v <- st_intersection(st_cast(v), st_union(communes))
v <- st_join(x = st_sf(v), y = c, join=st_intersects)
c <- st_centroid(st_geometry(communes))
v <- st_intersection(st_cast(v), st_union(communes))
v <- st_join(x = st_sf(v), y = c, join=st_intersects)
c <- st_centroid(communes)
v <- st_intersection(st_cast(v), st_union(communes))
v <- st_join(x = st_sf(v), y = c, join=st_intersects)
v <- st_cast(v, "MULTIPOLYGON")
plot(st_geometry(v), col='lightblue')
class(v)
View(v)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
c <- st_centroid(communes)
v <- st_intersection(st_cast(v), st_union(communes))
v <- st_intersection(st_cast(c), st_union(communes))
v <- st_join(x = st_sf(v), y = c, join=st_intersects)
v <- st_cast(v, "MULTIPOLYGON")
c <- st_centroid(st_geometry(communes))
v <- st_intersection(st_cast(c), st_union(communes))
v <- st_join(x = st_sf(v), y = c, join=st_intersects)
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
c <- st_centroid(communes)
v <- st_intersection(st_cast(c), st_union(communes))
v
c <- st_centroid(communes)
v <- st_voronoi(x = st_union(c))
v <- st_intersection(st_cast(c), st_union(communes))
v <- st_join(x = st_sf(v), y = c, join=st_intersects)
v <- st_cast(v, "MULTIPOLYGON")
c <- st_centroid(st_geometry(communes))
v <- st_voronoi(x = st_union(c))
v <- st_intersection(st_cast(c), st_union(communes))
v <- st_join(x = st_sf(v), y = c, join=st_intersects)
c <- st_centroid(communes)
v <- st_voronoi(x = st_union(c))
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
c <- st_centroid(communes)
v <- st_voronoi(x = st_union(c))
v <- st_intersection(st_cast(v), st_union(communes))
v <- st_join(x = st_sf(v), y = c, join=st_intersects)
v <- st_cast(v, "MULTIPOLYGON")
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
library(recmap)
sfc_as_cols <- function(x, geometry, names = c("x","y")) {
if (missing(geometry)) {
geometry <- sf::st_geometry(x)
} else {
geometry <- rlang::eval_tidy(enquo(geometry), x)
}
stopifnot(inherits(x,"sf") && inherits(geometry,"sfc_POINT"))
ret <- sf::st_coordinates(geometry)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
library(recmap)
sfc_as_cols <- function(x, geometry, names = c("x","y")) {
if (missing(geometry)) {
geometry <- sf::st_geometry(x)
} else {
geometry <- rlang::eval_tidy(enquo(geometry), x)
}
stopifnot(inherits(x,"sf") && inherits(geometry,"sfc_POINT"))
ret <- sf::st_coordinates(geometry)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
coords <- st_centroid(communes)
coords <- st_transform(coords, crs="+proj=longlat +datum=WGS84 +ellps=WGS84")
coords
df_recmap <- sfc_as_cols(coords)
df_recmap
rec_cartogram <- data.frame (x= df_recmap$x,
y=df_recmap$y,
# make the rectangles overlapping by correcting lines of longitude distance
dx = sqrt(df_recmap$pop2018) / 90 / abs((0.65 * 60 * cos(df_recmap$y*pi/180))),
dy = sqrt(df_recmap$pop2018) / 90 / (0.65 * 60),
z = sqrt(df_recmap$pop2018),
name = df_recmap$id)
rec_cartogram
head(rec_cartogram)
plot.recmap(df, col = NA, border = col, lwd=4,  col.text = col)
plot.recmap(rec_cartogram, col = NA, border = col, lwd=4,  col.text = col)
plot.recmap(rec_cartogram, col = NA, border = "red", lwd=4,  col.text = col)
plot(cartog[!cartog$name %in% c("IS","MT"),],  col = col, border = "white")
cartog <- recmap(df_recmap)
df_recmap
cartog <- recmap(rec_cartogram)
cartog
rec_cartogram <- data.frame (x= df_recmap$x,
y=df_recmap$y,
# make the rectangles overlapping by correcting lines of longitude distance
dx = sqrt(df_recmap$pop2018) / 90 / abs((0.65 * 60 * cos(df_recmap$y*pi/180))),
dy = sqrt(df_recmap$pop2018) / 90 / (0.65 * 60),
z = sqrt(df_recmap$pop2018),
name = df_recmap$id)
rec_cartogram
cartog <- recmap(rec_cartogram)
summary(cartog)
plot(cartog,  col = "red", border = "white")
plot(cartog,  col = "red", border = "red")
cartog <- recmap(rec_cartogram)
cartog
library(sf)
communes <- st_read("data/isere.geojson", quiet = TRUE ) %>% st_transform(2154)
data <- read.csv("data/popisrere.csv",  dec = ",")
communes = merge(x = communes[,c("id","name","geometry")],
y = data[,c("id", "pop2018","agri", "art", "cadr", "interm", "emp","ouvr","retr")],
by = "id")
isere = st_union(communes)
library(recmap)
sfc_as_cols <- function(x, geometry, names = c("x","y")) {
if (missing(geometry)) {
geometry <- sf::st_geometry(x)
} else {
geometry <- rlang::eval_tidy(enquo(geometry), x)
}
stopifnot(inherits(x,"sf") && inherits(geometry,"sfc_POINT"))
ret <- sf::st_coordinates(geometry)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
coords <- st_centroid(communes)
coords <- st_transform(coords, crs="+proj=longlat +datum=WGS84 +ellps=WGS84")
df_recmap <- sfc_as_cols(coords)
rec_cartogram <- data.frame (x= df_recmap$x,
y=df_recmap$y,
# make the rectangles overlapping by correcting lines of longitude distance
dx = sqrt(df_recmap$pop2018) / 90 / abs((0.65 * 60 * cos(df_recmap$y*pi/180))),
dy = sqrt(df_recmap$pop2018) / 90 / (0.65 * 60),
z = sqrt(df_recmap$pop2018),
name = df_recmap$id)
plot.recmap(rec_cartogram, col = NA, border = "red", lwd=4,  col.text = col)
cartog <- recmap(rec_cartogram)
cartog
plot(cartog,  col = "red", border = "red")
library(sf)
communes <-
st_read(
"https://raw.githubusercontent.com/transcarto/rcartograms/main/data/isere.geojson",
quiet = TRUE
) %>% st_transform(2154)
data <-
read.csv(
"https://raw.githubusercontent.com/transcarto/rcartograms/main/data/popisrere.csv",
dec = ","
)
communes = merge(x = communes[, c("id", "name", "geometry")],
y = data[, c("id",
"pop2018",
"agri",
"art",
"cadr",
"interm",
"emp",
"ouvr",
"retr")],
by = "id")
isere = st_union(communes)
library(sf)
library(recmap)
sfc_as_cols <- function(x, geometry, names = c("x","y")) {
if (missing(geometry)) {
geometry <- sf::st_geometry(x)
} else {
geometry <- rlang::eval_tidy(enquo(geometry), x)
}
stopifnot(inherits(x,"sf") && inherits(geometry,"sfc_POINT"))
ret <- sf::st_coordinates(geometry)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
coords <- st_centroid(communes)
coords <- st_transform(coords, crs="+proj=longlat +datum=WGS84 +ellps=WGS84")
df_recmap <- sfc_as_cols(coords)
rec_cartogram <- data.frame (x= df_recmap$x,
y=df_recmap$y,
# make the rectangles overlapping by correcting lines of longitude distance
dx = sqrt(df_recmap$pop2018) / 90 / abs((0.65 * 60 * cos(df_recmap$y*pi/180))),
dy = sqrt(df_recmap$pop2018) / 90 / (0.65 * 60),
z = sqrt(df_recmap$pop2018),
name = df_recmap$id)
europe <- st_read("https://raw.githubusercontent.com/transcarto/rcartograms/main/data/europe.json")
coords = data.frame(st_coordinates(st_centroid(st_geometry(europe))))
bb <- lapply(st_geometry(europe), function(x){st_bbox(x)})
dx <- unlist(lapply(bb, function(x){x[3]-x[1]})) / 2
dy <- unlist(lapply(bb, function(x){x[4]-x[2]})) / 2
df <- data.frame(x = coords$X,
y = coords$Y,
dx = dx,
dy = dy,
z = europe$pop2008,
name = europe$id)
europe <- st_read("https://raw.githubusercontent.com/transcarto/rcartograms/main/data/europe.json")
coords = data.frame(st_coordinates(st_centroid(st_geometry(europe))))
europe <- st_read("data/europe.gkpg")
coords = data.frame(st_coordinates(st_centroid(st_geometry(europe))))
europe <- st_read("data/europe.gkpg")
europe <- st_read("data/europe.geojson")
coords = data.frame(st_coordinates(st_centroid(st_geometry(europe))))
europe <- st_read("data/europe.shp")
coords = data.frame(st_coordinates(st_centroid(st_geometry(europe))))
europe <- st_read("data/europe1.geojson")
europe <- st_read("data/europe1.geojson") %>% st_transform(3035)
plot(st_geometry(europr))
plot(st_geometry(europe))
coords = data.frame(st_coordinates(st_centroid(st_geometry(europe))))
europe <- st_read("data/europe1.geojson") %>% st_transform(3035)
coords = data.frame(st_coordinates(st_centroid(st_geometry(europe))))
read.csv("https://missingmigrants.iom.int/global-figures/2021/csv")
